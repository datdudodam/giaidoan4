from chatbot.utils.llm import LLM  # noqa: I001
from chatbot.utils.retriever import Retriever
from chatbot.utils.document_grader import DocumentGrader
from chatbot.utils.answer_generator import AnswerGenerator
from chatbot.utils.no_answer_handler import NoAnswerHandler

from langgraph.graph import END, StateGraph, START
from chatbot.utils.graph_state import GraphState
from typing import Dict, Any

from app.config import settings


class FilesChatAgent:
    """
    L·ªõp FilesChatAgent ch·ªãu tr√°ch nhi·ªám qu·∫£n l√Ω quy tr√¨nh chatbot,
    t·ª´ t√¨m ki·∫øm t√†i li·ªáu, ƒë√°nh gi√° ƒë·ªô li√™n quan ƒë·∫øn t·∫°o c√¢u tr·∫£ l·ªùi v√† xu·∫•t k·∫øt qu·∫£ HTML.
    """

    def __init__(self, path_vector_store: str) -> None:
        """
        Kh·ªüi t·∫°o FilesChatAgent v·ªõi c√°c th√†nh ph·∫ßn ch√≠nh.

        Args:
            path_vector_store (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c l∆∞u tr·ªØ vector store.
        """
        self.retriever = Retriever(settings.LLM_NAME).set_retriever(path_vector_store)  # Kh·ªüi t·∫°o tr√¨nh t√¨m ki·∫øm t√†i li·ªáu
        self.llm = LLM().get_llm(settings.LLM_NAME)  # Kh·ªüi t·∫°o m√¥ h√¨nh ng√¥n ng·ªØ
        self.document_grader = DocumentGrader(self.llm)  # B·ªô ƒë√°nh gi√° t√†i li·ªáu
        self.answer_generator = AnswerGenerator(self.llm)  # B·ªô t·∫°o c√¢u tr·∫£ l·ªùi
        self.no_answer_handler = NoAnswerHandler(self.llm)  # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi

    def retrieve(self, state: GraphState) -> Dict[str, Any]:
        """
        T√¨m ki·∫øm c√°c t√†i li·ªáu li√™n quan ƒë·∫øn c√¢u h·ªèi.

        Args:
            state (GraphState): Tr·∫°ng th√°i hi·ªán t·∫°i ch·ª©a c√¢u h·ªèi.

        Returns:
            dict: Ch·ª©a danh s√°ch t√†i li·ªáu v√† c√¢u h·ªèi.
        """
        question = state["question"]
        documents = self.retriever.get_documents(question, int(settings.NUM_DOC))
        return {"documents": documents, "question": question}

    def generate(self, state: GraphState) -> Dict[str, Any]:
        """
        T·∫°o c√¢u tr·∫£ l·ªùi d·ª±a tr√™n c√°c t√†i li·ªáu li√™n quan.

        Args:
            state (GraphState): Tr·∫°ng th√°i hi·ªán t·∫°i ch·ª©a c√¢u h·ªèi v√† t√†i li·ªáu.

        Returns:
            dict: Ch·ª©a c√¢u tr·∫£ l·ªùi ƒë√£ ƒë∆∞·ª£c t·∫°o.
        """
        question = state["question"]
        documents = state["documents"]
        context = "\n\n".join(doc.page_content for doc in documents)  # Gh√©p n·ªôi dung c√°c t√†i li·ªáu th√†nh m·ªôt ƒëo·∫°n vƒÉn
        generation = self.answer_generator.get_chain().invoke({"question": question, "context": context})
        return {"generation": generation}

    def decide_to_generate(self, state: GraphState) -> str:
        """
        X√°c ƒë·ªãnh xem c√≥ n√™n t·∫°o c√¢u tr·∫£ l·ªùi hay kh√¥ng d·ª±a tr√™n t√†i li·ªáu t√¨m ƒë∆∞·ª£c.

        Args:
            state (GraphState): Tr·∫°ng th√°i hi·ªán t·∫°i ch·ª©a danh s√°ch t√†i li·ªáu.

        Returns:
            str: "no_document" n·∫øu kh√¥ng c√≥ t√†i li·ªáu, "generate" n·∫øu c√≥ th·ªÉ t·∫°o c√¢u tr·∫£ l·ªùi.
        """
        filtered_documents = state["documents"]

        if not filtered_documents:
            print("---QUY·∫æT ƒê·ªäNH: KH√îNG C√ì VƒÇN B·∫¢N LI√äN QUAN ƒê·∫æN C√ÇU H·ªéI, BI·∫æN ƒê·ªîI TRUY V·∫§N---")
            return "no_document"
        else:
            print("---QUY·∫æT ƒê·ªäNH: T·∫†O C√ÇU TR·∫¢ L·ªúI---")
            return "generate"

    def grade_documents(self, state: GraphState) -> Dict[str, Any]:
        """
       üìå **Nhi·ªám v·ª•**:
        B·∫°n ƒë∆∞·ª£c y√™u c·∫ßu t·∫°o m·ªôt c√¢u tr·∫£ l·ªùi chi ti·∫øt d·ª±a tr√™n c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng v√† ng·ªØ c·∫£nh ƒë√£ cho. H√£y tu√¢n th·ªß theo c√°c b∆∞·ªõc d∆∞·ªõi ƒë√¢y ƒë·ªÉ ƒë·∫£m b·∫£o c√¢u tr·∫£ l·ªùi r√µ r√†ng, ch√≠nh x√°c v√† c√≥ d·∫´n ch·ª©ng khi c·∫ßn thi·∫øt.

        üîπ **H∆∞·ªõng d·∫´n t·∫°o c√¢u tr·∫£ l·ªùi**:
        1Ô∏è‚É£ **X√°c ƒë·ªãnh ch·ªß ƒë·ªÅ ch√≠nh c·ªßa c√¢u h·ªèi** (tuy·ªÉn d·ª•ng, kinh t·∫ø, c√¥ng ngh·ªá, v.v.).
        2Ô∏è‚É£ **Tr√≠ch xu·∫•t th√¥ng tin t·ª´ d·ªØ li·ªáu c√≥ s·∫µn** ƒë·ªÉ ƒë·∫£m b·∫£o c√¢u tr·∫£ l·ªùi d·ª±a tr√™n b·∫±ng ch·ª©ng.
        3Ô∏è‚É£ **Di·ªÖn gi·∫£i l·∫°i th√¥ng tin m·ªôt c√°ch d·ªÖ hi·ªÉu** thay v√¨ ch·ªâ tr√≠ch xu·∫•t th√¥ t·ª´ t√†i li·ªáu.
        4Ô∏è‚É£ **Cung c·∫•p v√≠ d·ª• c·ª• th·ªÉ (n·∫øu c√≥ th·ªÉ)** ƒë·ªÉ tƒÉng t√≠nh thuy·∫øt ph·ª•c.
        5Ô∏è‚É£ **K·∫øt th√∫c b·∫±ng m·ªôt k·∫øt lu·∫≠n ng·∫Øn g·ªçn** ƒë·ªÉ t·ªïng h·ª£p th√¥ng tin quan tr·ªçng nh·∫•t.

        ‚úÖ **L∆∞u √Ω**:
        - N·∫øu c√¢u h·ªèi y√™u c·∫ßu s·ªë li·ªáu, h√£y c·ªë g·∫Øng cung c·∫•p th√¥ng tin c√≥ d·∫´n ch·ª©ng.
        - Tr√°nh s·ª≠ d·ª•ng c√¢u tr·∫£ l·ªùi chung chung ho·∫∑c kh√¥ng r√µ r√†ng.
        - N·∫øu c√≥ nhi·ªÅu ngu·ªìn th√¥ng tin, h√£y ch·ªçn ngu·ªìn ph√π h·ª£p nh·∫•t.

        üìù **V√≠ d·ª• c√¢u tr·∫£ l·ªùi**:
        - **C√¢u h·ªèi**: "M·ª©c l∆∞∆°ng trung b√¨nh c·ªßa nh√¢n vi√™n kinh doanh l√† bao nhi√™u?"
        - **Tr·∫£ l·ªùi**: "Theo th·ªëng k√™ nƒÉm 2024, m·ª©c l∆∞∆°ng trung b√¨nh c·ªßa nh√¢n vi√™n kinh doanh dao ƒë·ªông t·ª´ 10 tri·ªáu ƒë·∫øn 25 tri·ªáu ƒë·ªìng/th√°ng, t√πy v√†o kinh nghi·ªám v√† ng√†nh ngh·ªÅ. Trong lƒ©nh v·ª±c b·∫•t ƒë·ªông s·∫£n, m·ª©c l∆∞∆°ng c√≥ th·ªÉ cao h∆°n do hoa h·ªìng t·ª´ giao d·ªãch."
    """
        question = state["question"]
        documents = state["documents"]

        filtered_docs = []
        for d in documents:
            score = self.document_grader.get_chain().invoke({"question": question, "document": d.page_content})
            grade = score.binary_score
            if grade == "yes":
                print("---CH·∫§M ƒêI·ªÇM: T√ÄI LI·ªÜU LI√äN QUAN---")
                filtered_docs.append(d)
            else:
                print("---CH·∫§M ƒêI·ªÇM: T√ÄI LI·ªÜU KH√îNG LI√äN QUAN---")

        return {"documents": filtered_docs, "question": question}

    def handle_no_answer(self, state: GraphState) -> Dict[str, Any]:
        """
        ‚ùå **Kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi ph√π h·ª£p!**  
        Hi·ªán t·∫°i, h·ªá th·ªëng kh√¥ng th·ªÉ t√¨m th·∫•y c√¢u tr·∫£ l·ªùi ch√≠nh x√°c cho c√¢u h·ªèi c·ªßa b·∫°n. ƒê·ªÉ gi√∫p b·∫°n t·ªët h∆°n, vui l√≤ng th·ª≠ m·ªôt trong c√°c c√°ch sau:

        üîπ **C√°ch c·∫£i thi·ªán c√¢u h·ªèi**:
        - Tr√°nh ƒë·∫∑t c√¢u h·ªèi qu√° chung chung. V√≠ d·ª•:
            ‚ùå "Th√¥ng tin v·ªÅ tuy·ªÉn d·ª•ng?" (qu√° r·ªông)
            ‚úÖ "Xu h∆∞·ªõng tuy·ªÉn d·ª•ng nh√¢n s·ª± ng√†nh c√¥ng ngh·ªá nƒÉm 2024?"
        - N·∫øu b·∫°n ƒëang h·ªèi v·ªÅ m·ªôt s·ªë li·ªáu c·ª• th·ªÉ, h√£y cung c·∫•p kho·∫£ng th·ªùi gian ho·∫∑c ng·ªØ c·∫£nh li√™n quan.

        üîπ **B·∫°n c≈©ng c√≥ th·ªÉ th·ª≠ c√°c c√¢u h·ªèi sau**:
        - "M·ª©c l∆∞∆°ng trung b√¨nh c·ªßa nh√¢n vi√™n kinh doanh nƒÉm 2024?"
        - "K·ªπ nƒÉng quan tr·ªçng nh·∫•t ƒë·ªÉ l√†m nh√¢n vi√™n b√°n h√†ng?"
        - "Nh·ªØng c√¥ng ty n√†o ƒëang tuy·ªÉn d·ª•ng nhi·ªÅu nh√¢n vi√™n kinh doanh?"

        ‚úÖ **L∆∞u √Ω**:
        - H·ªá th·ªëng ch·ªâ c√≥ th·ªÉ tr·∫£ l·ªùi d·ª±a tr√™n d·ªØ li·ªáu c√≥ s·∫µn.
        - N·∫øu th√¥ng tin b·∫°n c·∫ßn kh√¥ng c√≥ trong h·ªá th·ªëng, h√£y th·ª≠ t√¨m ki·∫øm tr√™n c√°c ngu·ªìn kh√°c.
    """
        question = state["question"]
        generation = self.no_answer_handler.get_chain().invoke({"question": question})
        return {"generation": generation}

    def get_workflow(self):
        """
        Thi·∫øt l·∫≠p lu·ªìng x·ª≠ l√Ω c·ªßa chatbot, bao g·ªìm c√°c b∆∞·ªõc t√¨m ki·∫øm, ƒë√°nh gi√° v√† t·∫°o c√¢u tr·∫£ l·ªùi.

        Returns:
            StateGraph: ƒê·ªì th·ªã tr·∫°ng th√°i c·ªßa quy tr√¨nh chatbot.
        """
        workflow = StateGraph(GraphState)

        workflow.add_node("retrieve", self.retrieve)  # B∆∞·ªõc t√¨m ki·∫øm t√†i li·ªáu
        workflow.add_node("grade_documents", self.grade_documents)  # B∆∞·ªõc ch·∫•m ƒëi·ªÉm t√†i li·ªáu
        workflow.add_node("generate", self.generate)  # B∆∞·ªõc t·∫°o c√¢u tr·∫£ l·ªùi
        workflow.add_node("handle_no_answer", self.handle_no_answer)  # B∆∞·ªõc x·ª≠ l√Ω khi kh√¥ng c√≥ t√†i li·ªáu

        workflow.add_edge(START, "retrieve")
        workflow.add_edge("retrieve", "grade_documents")

        workflow.add_conditional_edges(
            "grade_documents",
            self.decide_to_generate,
            {
                "no_document": "handle_no_answer",
                "generate": "generate",
            },
        )

        workflow.add_edge("generate", END)

        return workflow
